{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"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","file":"static/js/main.0b5f8337.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react'\nimport {loadTweets} from '../lookup'\n\n\nexport function TweetsComponent(props) {\n  const textAreaRef = React.createRef()\n  const [newTweets, setNewTweets] = useState([])\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift({\n      content: newVal,\n      likes: 0,\n      id: 2323\n    })\n    setNewTweets(tempNewTweets)\n    textAreaRef.current.value = ''\n  }\n  \n  return <div className={props.className}>\n          <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n              <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n              </textarea>\n              <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n          </div>\n        <TweetsList newTweets={newTweets} />\n        </div> \n}\n\n\nexport function TweetsList(props) {\n        const [tweetsInit, setTweetsInit] = useState([])\n        const [tweets, setTweets] = useState([])\n\n        useEffect(() => {\n          const final = [...props.newTweets].concat(tweetsInit)\n          if (final.length !== tweets.length) {\n            setTweets(final)\n          } \n        }, [props.newTweets, tweets, tweetsInit])\n       \n        useEffect(() => {\n          const myCallback = (response, status) => {\n            if (status === 200){\n             \n              setTweetsInit(response)\n            } else {\n              alert(\"There was an error\")\n            }\n          }\n          loadTweets(myCallback)\n        }, [tweetsInit])\n      \n        return tweets.map((item, index)=>{\n          return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n        })\n      \n      }\n\nexport function ActionBtn(props) {\n        const {tweet, action} = props\n        const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n        const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n        const className = props.className ? props.className : 'btn btn-primary btn-small'\n        const actionDisplay = action.display ? action.display : 'Action'\n        \n        const handleClick = (event) => {\n          event.preventDefault()\n          if (action.type === 'like') {\n            if (userLike === true) {\n              setLikes(likes - 1)\n              setUserLike(false)\n            } else {\n              setLikes(likes+1)\n              setUserLike(true)\n            }     \n          }\n        }\n        const display = action.type === 'like' ? `${likes} ${actionDisplay}` :  actionDisplay\n        return <button className={className} onClick={handleClick}>{display}</button>\n    }\n   \nexport function Tweet(props) {\n        const {tweet} = props\n        const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n        return <div className={className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className='btn btn-group'>\n            <ActionBtn tweet={tweet} action={{type:\"like\", display:\"Likes\"}} />\n            <ActionBtn tweet={tweet} action={{type:\"unlike\", display:\"Unlike\"}} />\n            <ActionBtn tweet={tweet} action={{type:\"retweet\", display:\"Retweet\"}} />\n        </div>\n       \n        </div>\n    }","export function loadTweets(callback) {\n            const xhr = new XMLHttpRequest()\n            const method = 'GET'\n            const url = \"http://localhost:8000/api/tweets/\"\n            const responseType = \"json\"\n            xhr.responseType = responseType\n            xhr.open(method, url)\n            xhr.onload = function() {\n                callback(xhr.response, xhr.status)  \n            }\n            xhr.onerror = function (e) {\n            console.log(e)\n            callback({\"message\": \"The request was an error\"}, 400)\n            }\n            xhr.send()\n        }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport reportWebVitals from './reportWebVitals';\n\nconst appEl = document.getElementById('root')\n\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\n\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n  ReactDOM.render(<TweetsComponent />, tweetsEl);\n\n}\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}