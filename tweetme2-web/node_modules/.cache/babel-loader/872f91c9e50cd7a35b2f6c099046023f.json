{"ast":null,"code":"var _jsxFileName = \"/home/michel/Desktop/Machine Learning/Twitter_React/tweetme2-web/src/tweets/list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { apiTweetList } from './lookup';\nimport { Tweet } from './detail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TweetsList(props) {\n  _s();\n\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  const [nextUrl, setNextUrl] = useState(null);\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next);\n          setTweetsInit(response.results);\n          setTweetsDidSet(true);\n        } else {\n          alert(\"There was an error\");\n        }\n      };\n\n      apiTweetList(props.username, handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = newTweet => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweets(updateFinalTweets);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [tweets.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Tweet, {\n        tweet: item,\n        didRetweet: handleDidRetweet,\n        className: \"my-5 py-5 border bg-white text-dark\"\n      }, `${index}-{item.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }, this);\n    }), nextUrl !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Load Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n}\n\n_s(TweetsList, \"CK8DEMPf321wTX6TUPBPGOBv/bg=\");\n\n_c = TweetsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetsList\");","map":{"version":3,"sources":["/home/michel/Desktop/Machine Learning/Twitter_React/tweetme2-web/src/tweets/list.js"],"names":["React","useEffect","useState","apiTweetList","Tweet","TweetsList","props","tweetsInit","setTweetsInit","tweets","setTweets","nextUrl","setNextUrl","tweetsDidSet","setTweetsDidSet","final","newTweets","concat","length","handleTweetListLookup","response","status","next","results","alert","username","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,YAAT,QAA4B,UAA5B;AACA,SAAOC,KAAP,QAAmB,UAAnB;;AAIA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,KAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,KAAK,GAAG,CAAC,GAAGT,KAAK,CAACU,SAAV,EAAqBC,MAArB,CAA4BV,UAA5B,CAAd;;AACA,QAAIQ,KAAK,CAACG,MAAN,KAAiBT,MAAM,CAACS,MAA5B,EAAoC;AAClCR,MAAAA,SAAS,CAACK,KAAD,CAAT;AACD;AACF,GALQ,EAKN,CAACT,KAAK,CAACU,SAAP,EAAkBP,MAAlB,EAA0BF,UAA1B,CALM,CAAT;AAOAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,YAAY,KAAK,KAArB,EAA4B;AAC1B,YAAMM,qBAAqB,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAClD,YAAIA,MAAM,KAAK,GAAf,EAAmB;AACjBT,UAAAA,UAAU,CAACQ,QAAQ,CAACE,IAAV,CAAV;AACAd,UAAAA,aAAa,CAACY,QAAQ,CAACG,OAAV,CAAb;AACAT,UAAAA,eAAe,CAAC,IAAD,CAAf;AACD,SAJD,MAIO;AACLU,UAAAA,KAAK,CAAC,oBAAD,CAAL;AACD;AACF,OARD;;AASArB,MAAAA,YAAY,CAACG,KAAK,CAACmB,QAAP,EAAiBN,qBAAjB,CAAZ;AACD;AACF,GAbQ,EAaN,CAACZ,UAAD,EAAaM,YAAb,EAA2BC,eAA3B,EAA4CR,KAAK,CAACmB,QAAlD,CAbM,CAAT;;AAeA,QAAMC,gBAAgB,GAAIC,QAAD,IAAc;AACrC,UAAMC,gBAAgB,GAAG,CAAC,GAAGrB,UAAJ,CAAzB;AACAqB,IAAAA,gBAAgB,CAACC,OAAjB,CAAyBF,QAAzB;AACAnB,IAAAA,aAAa,CAACoB,gBAAD,CAAb;AACA,UAAME,iBAAiB,GAAG,CAAC,GAAGrB,MAAJ,CAA1B;AACAqB,IAAAA,iBAAiB,CAACD,OAAlB,CAA0BpB,MAA1B;AACAC,IAAAA,SAAS,CAACoB,iBAAD,CAAT;AACD,GAPD;;AASA,sBAAO,QAAC,KAAD,CAAO,QAAP;AAAA,eAAiBrB,MAAM,CAACsB,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,KAAe;AAChD,0BAAO,QAAC,KAAD;AACL,QAAA,KAAK,EAAED,IADF;AAEL,QAAA,UAAU,EAAEN,gBAFP;AAGL,QAAA,SAAS,EAAC;AAHL,SAIC,GAAEO,KAAM,YAJT;AAAA;AAAA;AAAA;AAAA,cAAP;AAKD,KANuB,CAAjB,EAOLtB,OAAO,KAAK,IAAZ,iBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPf;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAUD;;GA/CaN,U;;KAAAA,U","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { apiTweetList} from './lookup'\nimport{Tweet} from './detail'\n\n\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n\n    useEffect(() => {\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length) {\n        setTweets(final)\n      } \n    }, [props.newTweets, tweets, tweetsInit])\n   \n    useEffect(() => {\n      if (tweetsDidSet === false) {\n        const handleTweetListLookup = (response, status) => {\n          if (status === 200){\n            setNextUrl(response.next)\n            setTweetsInit(response.results)\n            setTweetsDidSet(true)\n          } else {\n            alert(\"There was an error\")\n          }\n        }\n        apiTweetList(props.username, handleTweetListLookup)\n      }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n    \n    const handleDidRetweet = (newTweet) => {\n      const updateTweetsInit = [...tweetsInit]\n      updateTweetsInit.unshift(newTweet)\n      setTweetsInit(updateTweetsInit)\n      const updateFinalTweets = [...tweets]\n      updateFinalTweets.unshift(tweets)\n      setTweets(updateFinalTweets)\n    }\n\n    return <React.Fragment>{tweets.map((item, index)=>{\n      return <Tweet \n        tweet={item}\n        didRetweet={handleDidRetweet}\n        className='my-5 py-5 border bg-white text-dark'\n        key={`${index}-{item.id}`} />\n    })}\n    { nextUrl !== null && <button>Load Next</button>}\n    </React.Fragment>\n  \n  }"]},"metadata":{},"sourceType":"module"}