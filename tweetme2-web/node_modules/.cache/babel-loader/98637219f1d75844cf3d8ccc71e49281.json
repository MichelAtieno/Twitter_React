{"ast":null,"code":"var _jsxFileName = \"/home/michel/Desktop/Machine Learning/Twitter_React/tweetme2-web/src/tweets/components.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction loadTweets(callback) {\n  const xhr = new XMLHttpRequest();\n  const method = 'GET';\n  const url = \"http://localhost:8000/api/tweets/\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    console.log(e);\n    callback({\n      \"message\": \"The request was an error\"\n    }, 400);\n  };\n\n  xhr.send();\n}\n\nexport function TweetsList(props) {\n  _s();\n\n  const [tweets, setTweets] = useState([]);\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      if (status === 200) {\n        setTweets(response);\n      } else {\n        alert(\"There was an error\");\n      }\n    };\n\n    loadTweets(myCallback);\n  }, []);\n  return tweets.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(Tweet, {\n      tweet: item,\n      className: \"my-5 py-5 border bg-white text-dark\"\n    }, `${index}-{item.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 18\n    }, this);\n  });\n}\n\n_s(TweetsList, \"tlPhWtKxaAnAviYMgoNvFaAwXFo=\");\n\n_c = TweetsList;\nexport function ActionBtn(props) {\n  const {\n    tweet,\n    action\n  } = props;\n  const className = props.className ? props.className : 'btn btn-primary btn-small';\n  return action.type === 'like' ? /*#__PURE__*/_jsxDEV(\"button\", {\n    className: className,\n    children: [tweet.likes, \" Likes\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 41\n  }, this) : null;\n}\n_c2 = ActionBtn;\nexport function Tweet(props) {\n  const {\n    tweet\n  } = props;\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [tweet.id, \" - \", tweet.content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(ActionBtn, {\n        tweet: tweet,\n        action: {\n          type: \"like\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ActionBtn, {\n        tweet: tweet,\n        action: {\n          type: \"unlike\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 16\n  }, this);\n}\n_c3 = Tweet;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TweetsList\");\n$RefreshReg$(_c2, \"ActionBtn\");\n$RefreshReg$(_c3, \"Tweet\");","map":{"version":3,"sources":["/home/michel/Desktop/Machine Learning/Twitter_React/tweetme2-web/src/tweets/components.js"],"names":["React","loadTweets","callback","xhr","XMLHttpRequest","method","url","responseType","open","onload","response","status","onerror","e","console","log","send","TweetsList","props","tweets","setTweets","useState","useEffect","myCallback","alert","map","item","index","ActionBtn","tweet","action","className","type","likes","Tweet","id","content"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction loadTweets(callback) {\n        const xhr = new XMLHttpRequest()\n        const method = 'GET'\n        const url = \"http://localhost:8000/api/tweets/\"\n        const responseType = \"json\"\n        xhr.responseType = responseType\n        xhr.open(method, url)\n        xhr.onload = function() {\n            callback(xhr.response, xhr.status)  \n        }\n        xhr.onerror = function (e) {\n        console.log(e)\n        callback({\"message\": \"The request was an error\"}, 400)\n        }\n        xhr.send()\n    }\n\nexport function TweetsList(props) {\n        const [tweets, setTweets] = useState([])\n      \n        useEffect(() => {\n          const myCallback = (response, status) => {\n            if (status === 200){\n              setTweets(response)\n            } else {\n              alert(\"There was an error\")\n            }\n          }\n          loadTweets(myCallback)\n        }, [])\n      \n        return tweets.map((item, index)=>{\n          return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n        })\n      \n      }\n\nexport function ActionBtn(props) {\n        const {tweet, action} = props\n        const className = props.className ? props.className : 'btn btn-primary btn-small'\n        return action.type === 'like' ? <button className={className}>{tweet.likes} Likes</button> : null\n    }\n   \nexport function Tweet(props) {\n        const {tweet} = props\n        const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n        return <div className={className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className='btn btn-group'>\n            <ActionBtn tweet={tweet} action={{type:\"like\"}} />\n            <ActionBtn tweet={tweet} action={{type:\"unlike\"}} />\n        </div>\n    \n        </div>\n    }"]},"metadata":{},"sourceType":"module"}