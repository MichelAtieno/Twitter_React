{"ast":null,"code":"var _jsxFileName = \"/home/michel/Desktop/Machine Learning/Twitter_React/tweetme2-web/src/tweets/feed.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { apiTweetFeed } from './lookup';\nimport { Tweet } from './detail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function FeedList(props) {\n  _s();\n\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  const [nextUrl, setNextUrl] = useState(null);\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next);\n          setTweetsInit(response.results);\n          setTweetsDidSet(true);\n        } else {\n          alert(\"There was an error\");\n        }\n      };\n\n      apiTweetFeed(handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = newTweet => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweets(updateFinalTweets);\n  };\n\n  const handleLoadNext = event => {\n    event.preventDefault();\n\n    if (nextUrl !== null) {\n      const handleLoadNextResponse = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next);\n          const newTweets = [...tweets].concat(response.results);\n          setTweetsInit(newTweets);\n          setTweets(newTweets);\n        } else {\n          alert(\"There was an error\");\n        }\n      };\n\n      apiTweetFeed(handleLoadNextResponse, nextUrl);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [tweets.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Tweet, {\n        tweet: item,\n        didRetweet: handleDidRetweet,\n        className: \"my-5 py-5 border bg-white text-dark\"\n      }, `${index}-{item.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }, this);\n    }), nextUrl !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLoadNext,\n      className: \"btn btn-outline-primary\",\n      children: \"Load Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 12\n  }, this);\n}\n\n_s(FeedList, \"CK8DEMPf321wTX6TUPBPGOBv/bg=\");\n\n_c = FeedList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedList\");","map":{"version":3,"sources":["/home/michel/Desktop/Machine Learning/Twitter_React/tweetme2-web/src/tweets/feed.js"],"names":["React","useEffect","useState","apiTweetFeed","Tweet","FeedList","props","tweetsInit","setTweetsInit","tweets","setTweets","nextUrl","setNextUrl","tweetsDidSet","setTweetsDidSet","final","newTweets","concat","length","handleTweetListLookup","response","status","next","results","alert","username","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","handleLoadNext","event","preventDefault","handleLoadNextResponse","map","item","index"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {  apiTweetFeed } from './lookup'\nimport{Tweet} from './detail'\n\n\n\nexport function FeedList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n\n    useEffect(() => {\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length) {\n        setTweets(final)\n      } \n    }, [props.newTweets, tweets, tweetsInit])\n   \n    useEffect(() => {\n      if (tweetsDidSet === false) {\n        const handleTweetListLookup = (response, status) => {\n          if (status === 200){\n            setNextUrl(response.next)\n            setTweetsInit(response.results)\n            setTweetsDidSet(true)\n          } else {\n            alert(\"There was an error\")\n          }\n        }\n        apiTweetFeed(handleTweetListLookup)\n      }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n    \n    const handleDidRetweet = (newTweet) => {\n      const updateTweetsInit = [...tweetsInit]\n      updateTweetsInit.unshift(newTweet)\n      setTweetsInit(updateTweetsInit)\n      const updateFinalTweets = [...tweets]\n      updateFinalTweets.unshift(tweets)\n      setTweets(updateFinalTweets)\n    }\n\n    const handleLoadNext = (event) => {\n      event.preventDefault()\n      if (nextUrl !== null) {\n        const handleLoadNextResponse = (response, status) => {\n          if (status === 200){\n            setNextUrl(response.next)\n            const newTweets = [...tweets].concat(response.results)\n            setTweetsInit(newTweets)\n            setTweets(newTweets)\n          } else {\n            alert(\"There was an error\")\n          }\n        }\n\n        apiTweetFeed(handleLoadNextResponse, nextUrl)\n      }\n    }\n\n    return <React.Fragment>{tweets.map((item, index)=>{\n      return <Tweet \n        tweet={item}\n        didRetweet={handleDidRetweet}\n        className='my-5 py-5 border bg-white text-dark'\n        key={`${index}-{item.id}`} />\n    })}\n    { nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load Next</button>}\n    </React.Fragment>\n  \n  }"]},"metadata":{},"sourceType":"module"}